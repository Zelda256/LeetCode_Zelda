# 4. Median of Two Sorted Arrays
标签（空格分隔）： Hard 

---

There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
**Example 1:**

    > nums1 = [1, 3] nums2 = [2]
    > 
    > The median is 2.0


**Example 2:**

    > nums1 = [1, 2] nums2 = [3, 4]
    > 
    > The median is (2 + 3)/2 = 2.5

---
给出两个已排好序的vector数组nums1和nums2，大小分别为m和n，找出两个数组的中间数。时间复杂度要求为O(log (m+n)).

因为数组是已排好序的，所以容易把两个数组合并到一个排好序的大数组nums，再找出中间数。大数组的长度应该为m+n。
①设置两个指针pt1和pt2分别指向两个数组的0号位置；
②当两个指针pt1和pt2都在范围内，即(pt1<m && pt2<n)时，如果nums1[pt1] < nums[pt2] ，就将nums1[pt1]插入到nums的末尾位置，且pt1++；否则，就将nums[pt2]插入到nums的末尾位置，且pt2++；
③如果pt2超出了范围，即pt2>=n时，将数组nums1的剩余部分插入到nums；
④如果pt1超出了范围，即pt1>=m时，将数组nums2的剩余部分插入到nums；
⑤输出nums的中间数

---

    class Solution {
    public:
           double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
                   vector<int> nums;
                   int m = nums1.size(), n = nums2.size();
                   int nm = m + n;
                   int pt1 = 0, pt2 = 0;
                   for (int i = 0; i < nm; ++i) {
                          if (pt1 < m && pt2 < n) {  //两个指针在范围内
                                  int a = nums1[pt1], b = nums2[pt2];
                                  if (a < b) { nums.push_back(a);  pt1++; }
                                  else { nums.push_back(b);  pt2++; }
                          }
                          else if (pt2 >= n) { nums.push_back(nums1[pt1]);  pt1++; }
                          else if (pt1 >= m) { nums.push_back(nums2[pt2]);  pt2++; }
                   }
                   if (nm % 2 == 0) {
                          double t = nums[(nm / 2) - 1] + nums[(nm / 2)];
                          return t / 2;
                   }
                   else
                          return nums[nm / 2];
           }
    };



